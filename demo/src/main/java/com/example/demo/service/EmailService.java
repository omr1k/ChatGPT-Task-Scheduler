package com.example.demo.service;

import com.example.demo.model.Config;
import com.example.demo.model.Result;
import com.example.demo.model.Schedule;
import com.example.demo.repository.ConfigRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.format.DateTimeFormatter;

@Service
public class EmailService {
    
    @Autowired
    private ConfigRepository configRepository;
    
    private final HttpClient httpClient = HttpClient.newHttpClient();
    
    public void sendChatGptResult(Result result) {
        try {
            // Get user's email and Mailtrap token from config
            Config config = configRepository.findFirstByOrderByIdAsc();
            if (config == null || config.getUserEmail() == null) {
                System.out.println("No user email configured. Skipping email send.");
                return;
            }
            
            if (config.getMailtrapToken() == null) {
                System.out.println("No Mailtrap token configured. Skipping email send.");
                return;
            }
            
            Schedule schedule = result.getSchedule();
            String emailBody = buildEmailBody(result);
            
            // Prepare JSON payload for Mailtrap API
            String jsonPayload = String.format("""
                {
                    "from": {
                        "email": "hello@demomailtrap.co",
                        "name": "ChatGPT Scheduler"
                    },
                    "to": [
                        {
                            "email": "%s"
                        }
                    ],
                    "subject": "ChatGPT Result: %s",
                    "text": "%s",
                    "category": "ChatGPT Scheduler"
                }
                """, 
                config.getUserEmail(),
                schedule.getPromptText().substring(0, Math.min(schedule.getPromptText().length(), 50)) + "...",
                emailBody.replace("\"", "\\\"").replace("\n", "\\n")
            );
            
            // Send email via Mailtrap API
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("https://send.api.mailtrap.io/api/send"))
                    .header("Authorization", "Bearer " + config.getMailtrapToken())
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(jsonPayload))
                    .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println("Email sent successfully for result ID: " + result.getId());
            } else {
                System.err.println("Failed to send email. Status: " + response.statusCode() + ", Response: " + response.body());
            }
            
        } catch (Exception e) {
            System.err.println("Failed to send email for result ID: " + result.getId());
            e.printStackTrace();
        }
    }
    
    private String buildEmailBody(Result result) {
        Schedule schedule = result.getSchedule();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM dd, yyyy 'at' HH:mm");
        
        StringBuilder body = new StringBuilder();
        body.append("ü§ñ ChatGPT Scheduler Result\n");
        body.append("==========================\n\n");
        
        body.append("üìù Prompt: ").append(schedule.getPromptText()).append("\n");
        body.append("‚è∞ Executed: ").append(result.getCreatedAt().format(formatter)).append("\n");
        body.append("üìÖ Schedule: ").append(schedule.getCronExpression()).append("\n");
        body.append("‚úÖ Status: ").append(result.getStatus()).append("\n\n");
        
        body.append("üí¨ Response:\n");
        body.append("------------\n");
        body.append(result.getResponseText()).append("\n\n");
        
        body.append("---\n");
        body.append("This email was automatically generated by your ChatGPT Scheduler.");
        
        return body.toString();
    }
    
    public void sendTestEmail() {
        try {
            // Get user's email and Mailtrap token from config
            Config config = configRepository.findFirstByOrderByIdAsc();
            if (config == null || config.getUserEmail() == null) {
                System.out.println("No user email configured. Cannot send test email.");
                return;
            }
            
            if (config.getMailtrapToken() == null) {
                System.out.println("No Mailtrap token configured. Cannot send test email.");
                return;
            }
            
            String jsonPayload = String.format("""
                {
                    "from": {
                        "email": "hello@demomailtrap.co",
                        "name": "ChatGPT Scheduler"
                    },
                    "to": [
                        {
                            "email": "%s"
                        }
                    ],
                    "subject": "ChatGPT Scheduler - Test Email",
                    "text": "This is a test email from your ChatGPT Scheduler. If you receive this, email configuration is working correctly!",
                    "category": "Test"
                }
                """, config.getUserEmail());
            
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("https://send.api.mailtrap.io/api/send"))
                    .header("Authorization", "Bearer " + config.getMailtrapToken())
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(jsonPayload))
                    .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println("Test email sent successfully!");
            } else {
                System.err.println("Failed to send test email. Status: " + response.statusCode() + ", Response: " + response.body());
            }
            
        } catch (Exception e) {
            System.err.println("Failed to send test email");
            e.printStackTrace();
        }
    }
} 